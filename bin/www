#!/usr/bin/env node

/**
 * Module dependencies.
 */

var config = require('../core/config/config');
var mongoose = require(config.dbconnect)(config);

console.log('Instanciating app from [%s]', config.app);
var app = require(config.app);

var debug = require('debug')(config.debug);
// nótese la invocación desde la línea de comando: DEBUG=develar:* npm start
//        la notación develar:server es jerarquica

var http = require('http');

/**
 * Get port from config and store in Express.
 */
app.set('port', config.port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(config.port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof config.port === 'string'
    ? 'Pipe ' + config.port
    : 'Port ' + config.port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // muestra mensaje solo en caso de que el modo DEBUG de la línea de comando
  // coincida con el indicado en línea 8
  debug('Listening on ' + bind);
  debug(require.main.filename);
}
